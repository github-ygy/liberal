ioc的循环依赖是如何解决？
    Spring主要用了三层缓存来完成对循环依赖的实现
    其中第一层是singletonObjects，首先会去看singletonObjects是否已经创建了一个对象。
    如果没有，那么从第二层缓存earlySingletonObjects提前曝光对象的缓存中获取；
    如果没有，那么最后从第三层缓存singletonFactories单实例工厂缓存中获取。
    当获取成功后，会把第三层缓存singletonFactories的bean去掉，加入到第二层缓存中。

    这时完成A的构造后，需要填充B属性，继续第二步，发现B还没有构造，
    于是开始B流程的构造过程，构造的时候发现需要填充A，
    从第三层缓存singletonFactories中找到A(此时的A还没有完全构造完成，但是可以拿到A的一个引用)，
    B拿到A的引用后，完成B自己的填充属性工作，完成初始化工作，
    把自己放到第一层缓存singletonObjects中。
    这时回到A的这边，在拿到B对象后，完成自己的填充属性工作。


ioc的优点？

什么是spring的依赖注入？


spring支持的bean的作用域
    a.singlelon:spring ioc容器中只有一个实例
    b.prototype:一个bean有多个实例
    c.request:
    d.session:
    e.global-session:

spring中的单例bean是线程安全的吗？


解释spring的bean生命周期
    一些周期接口在类初始化的流程中，如果bean实现了这些接口会调用这些接口



